# -*- coding: utf-8 -*-
import subprocess
import logging
import os
import pymysql
import pytz
import sys
import json
import pandas as pd
import smtplib
from email.mime.text import MIMEText

from datetime import datetime, timedelta
#from configParser import SafeConfigParser, Error as ConfigParserError
from configparser import ConfigParser
from logging.handlers import RotatingFileHandler
from multiprocessing import Process
import pymongo


class Block_ip_search(Process):
	def __init__(self, conf_name):
		try:
			Process.__init__(self)

			config = ConfigParser()
			config.read(conf_name)

			self.now_time = datetime.now()

			self.set_logger(config.get("PATH", "LOG_PATH"))
			
			#이력 DB
			self.nsgd_db = pymysql.connect(host=config.get("NSGD_DB", "SERVER_IP"), user=config.get("NSGD_DB", "USER"), password=config.get("NSGD_DB", "PASSWORD"), db=config.get("NSGD_DB", "DB_NAME"))
			self.nsgd_cur = self.nsgd_db.cursor()
			#netflow DB
			self.sink_db = pymysql.connect(host=config.get("SINK_DB", "SERVER_IP"), user=config.get("SINK_DB", "USER"), password=config.get("SINK_DB", "PASSWORD"), db=config.get("SINK_DB", "DB_NAME"), charset="utf8")
			self.sink_cur = self.sink_db.cursor(pymysql.cursors.DictCursor)

			self.tmp_file_path = config.get("PATH", "TMP_FILE_PATH")
			self.block_ip_dic = {} #차단IP : 차단시간[yyyymmddhhmmss]
			self.zombie_ip_dic = {} #좀비IP : [소스IP (ddos공격유발한)들 ]
			self.static_analyze = 0 #0:자동 /1이상:수동(수동 조회일 값 ex: 2일 경우 최근 2일치 수동 조회)

			# 메일 수신자
			self.to_mail = ['abc@abc.com', 'abc@abc.com', 'sabc@abc.com']

			# 몽고DB conn
			self.db_ip = config.get("MONGO_DB", "IP")
			self.db_port = int(config.get("MONGO_DB", "PORT"))
			# self.db_host = self.db_ip + ':' + self.db_port
			self.db_user = config.get("MONGO_DB", "ID")
			self.db_passwd = config.get("MONGO_DB", "PW")
			self.db_name = 'netflow_db'
			tb_t = (self.now_time - timedelta(minutes=10)).strftime('%Y%m%d%H')
			self.db_collection = 'netflow-'+tb_t

		except Exception as ex:
			self.logger.critical(str(ex))

	def set_logger(self, log_path):
		if not os.path.exists(log_path):
			subprocess.getstatusoutput("mkdir -p " + log_path)

		self.logger = logging.getLogger("Block_ip_search")

		self.logger.setLevel(logging.INFO)

		log_name = "block_ip_search.log"
		formatter = logging.Formatter("[%(asctime)s][%(levelname)s] %(filename)s(%(lineno)d) %(message)s")
		file_handler = RotatingFileHandler(os.path.join(log_path, log_name), maxBytes=5 * 1024 * 1024, backupCount=10)
		stream_handler = logging.StreamHandler()
		file_handler.setFormatter(formatter)
		stream_handler.setFormatter(formatter)

		self.logger.addHandler(file_handler)
		self.logger.addHandler(stream_handler)

	#차단 IP 조회
	def get_block_ip(self):
		try:
			self.logger.info("----------------------------------------------------------")
			self.logger.info("get block ip list...")

			#현 시간부터 과거 얼만큼 조회할지 
			#**********************************************************************************
			d1 = (self.now_time - timedelta(minutes=5)).strftime('%Y-%m-%d %H:%M:%S') #실사용시
			d2 = (self.now_time - timedelta(minutes=10)).strftime('%Y-%m-%d %H:%M:%S') #실사용시
			#**********************************************************************************
			if self.static_analyze > 0:
				d2 = (datetime.now() - timedelta(minutes=self.static_analyze)).strftime('%Y-%m-%d %H:%M:%S') #수동 조회시
				d2 = '2021-05-18 09:54:00' # test용 

			qry_str = '''
            DB쿼리문
            ''' 

			self.nsgd_cur.execute(qry_str) 
			result = self.nsgd_cur.fetchall()

			#self.block_ip_dic형태: {"차단IP" : "차단시간(yyyymmddhhmmss)"}
			self.block_ip_dic = { obj[0] : obj[1].strftime('%Y%m%d%H%M%S') for obj in result }
			self.logger.info("차단IP 조회시간: %s ~ %s" %(d2,d1) )
			self.logger.info("차단IP: %s개" %(len(result)))
			self.logger.info("{block_ip:차단시간[yyyymmddhhmmss]} ==> %s" %(self.block_ip_dic) )
		except Exception as ex:
			self.logger.critical(str(ex))

	#좀비IP 찾기
	def get_zombie_ip(self):
		try:
			self.logger.info("----------------------------------------------------------")
			self.logger.info("get zombie ip list...")
			d1 = self.now_time.strftime('%Y-%m-%d %H:%M:%S')
			d2 = (self.now_time - timedelta(minutes=10)).strftime('%Y-%m-%d %H:%M:%S')
			tb_t = self.now_time.strftime('%Y%m%d')


			zombie_ip_cnt = 0	
			if self.static_analyze == 0: #자동(self.static_analyze =  0)일때만 출력
				self.logger.info("좀비IP 조회시간: %s ~ %s" %(d2,d1) )
			for b_ip, b_time in self.block_ip_dic.items():
					
				###############################################################################
				if self.static_analyze > 0: #수동조회시만 동작
					tmp_time = datetime.strptime(b_time, '%Y%m%d%H%M%S')
					d2 = tmp_time.strftime('%Y-%m-%d %H:%M:%S') #차단 시간
					d2 = (tmp_time + timedelta(minutes=85)).strftime('%Y-%m-%d %H:%M:%S') #차단시간 +a
					d1 = (tmp_time + timedelta(minutes=100)).strftime('%Y-%m-%d %H:%M:%S') #차단시간 +a
					###stress test 용
					d1 = self.now_time.strftime('%Y-%m-%d %H:%M:%S')
					d2 = (self.now_time - timedelta(minutes=15)).strftime('%Y-%m-%d %H:%M:%S')
					###
					tb_t = (tmp_time + timedelta(minutes=10)).strftime('%Y%m%d')
					self.logger.info("++++++++++++++++++++++++++++++++++++++++++++++++++++++++++")
					self.logger.info("좀비IP 조회시간(수동): %s ~ %s" %(d2,d1) )
				###############################################################################

				self.logger.info("find Zombie IP from %s" %b_ip)

				qry_str = '''
                db쿼리문
                '''
				self.sink_cur.execute(qry_str) 
				#self.logger.info(qry_str) 
				result = self.sink_cur.fetchall()
				self.logger.info(f"Sinkhole DB flow: {len(result)}!!!")
				#파일 저장
				if (len(result)) > 0:
					self.save_tmp_file(b_ip, result)
				#sinkhole flow에 데이터가 없을 경우
				if (len(result)) < 500:
					#몽고db netflow collection에서 데이터 조회
					self.logger.info(f"Query Netflow_DB...")
					result = list(self.select_netflow_db(b_ip))
					#조회 결과를 json파일로 저장
					self.save_tmp_file(b_ip, result)

				#victim_ip1개에 대해서 다수의 zombie_ip 추출
				tmp_ip = [z_ip['ipv4_src_addr'] for z_ip in result]
				tmp_ip = list(set(tmp_ip)) #중복제거
				zombie_ip_cnt += len(tmp_ip) 	

				self.zombie_ip_dic[b_ip] = tmp_ip 
				self.logger.info("block_ip: %s | %s개" %(b_ip, len(tmp_ip)) )
				#self.logger.info(qry_str)
			self.logger.info("----------------------------------------------------------")
			self.logger.info("Total Zombie IP: %s개" %(zombie_ip_cnt))
			self.logger.info("----------------------------------------------------------")
	

		except Exception as ex:
			self.logger.critical(str(ex))

	#확인한파일(.done) 삭제	
	def delete_tmp_file(self):
		try:
			subprocess.getstatusoutput("rm -rf " + self.tmp_file_path + "/*.done")
		except Exception as ex:
			self.logger.critical(str(ex))

		

	#임시파일 저장
	def save_tmp_file(self, b_ip, data):
		try: 
			self.logger.info("%s file saving..." %(b_ip))
			#data: dic들을 가지고 있는 리스트 타입->  list[dic{}, dic{}, dic{} ]
			file_dir = self.tmp_file_path
			d1 = self.now_time.strftime('%Y%m%d%H%M%S')

			#file_name형태: [차단IP]_[차단날짜:yyyymmdd]_[차단시간:hhmmss].json
			file_name = self.block_ip_dic[b_ip][:8] +'_' + self.block_ip_dic[b_ip][8:] + '_' + b_ip + '.json'
			
			if self.static_analyze > 0: #수동일경우 stress test용 
				#file_name형태: [차단IP]_[현날짜:yyyymmdd]_[현시간:hhmmss].json
				file_name = d1[:8] + '_' + d1[8:] + '_' + b_ip + '.json'

			#columns = ['time_stamp','ip_protocol_version', 'bytes','pkts','prot','l4_src_port','l4_dst_port','ipv4_src_addr','ipv4_dst_addr']
			#df1 = pd.DataFrame(columns=columns)
			if not os.path.exists(file_dir):
				subprocess.getstatusoutput("mkdir -p " + file_dir)


			with open(file_dir+'/'+file_name, 'w', encoding='utf-8') as outfile:
				json.dump(data, outfile, indent='\t')
			self.logger.info('json file saved: %s / %s' %(file_dir, file_name))

			#백업용 저장
			file_dir = '/home/pbs/backup'
			if not os.path.exists(file_dir):
				subprocess.getstatusoutput("mkdir -p " + file_dir)

			with open(file_dir+'/'+file_name, 'w', encoding='utf-8') as outfile:
				json.dump(data, outfile, indent='\t')
			self.logger.info('backup file saved: %s / %s' %(file_dir, file_name))



		except Exception as ex:
			self.logger.critical(str(ex))

	def send_mail(self):
		try:
			#self.block_ip_dic = {}  # 차단IP : 차단시간[yyyymmddhhmmss]
			#self.zombie_ip_dic = {}  # 좀비IP : [소스IP (ddos공격유발한)들 ]
			# **********************************************************************************
			d1 = (self.now_time - timedelta(minutes=10)).strftime('%Y-%m-%d %H:%M:%S')  # 실사용시
			d2 = (self.now_time - timedelta(minutes=20)).strftime('%Y-%m-%d %H:%M:%S')  # 실사용시
			# **********************************************************************************
			now_time = self.now_time.strftime("%m-%d %H:%M")

			mail_text = "DDoS 공격으로 차단 IP 발생 하였습니다. \n"
			mail_text = mail_text + "차단 조회시간: " + str(d2) + " ~ " + str(d1) + "\n"
			mail_text = mail_text + '==============================================================================\n'
			for b_ip, b_time in self.block_ip_dic.items():
				b_time_str = (datetime.strptime(b_time, '%Y%m%d%H%M%S')).strftime('%Y-%m-%d %H:%M:%S')
				mail_text = mail_text + "차단시간: " + str(b_time_str) + " | "
				mail_text = mail_text + "차단IP: " + str(b_ip) + " | " 
				mail_text = mail_text + "좀비IP수: " + str(len(self.zombie_ip_dic[b_ip])) + "\n"
			mail_text = mail_text + '==============================================================================\n'

			self.logger.info("context: %s" % (mail_text))

			# 세션생성
			s = smtplib.SMTP('smtp.gmail.com', 587)  # gmail사용하기위한 변수, 지메일포트(587)
			# TLS보안시작
			s.starttls()
			# 로그인 인증
			s.login('abc@gmail.com', 'nkydcdgscorwpezm')
			# 보낼 메시지 설정
			msg = MIMEText('%s' % (mail_text))
			msg['Subject'] = '[알림]DDoS Victim IP 차단'
			msg['From'] = 'abc@gmail.com'

			# 메일 보내기
			for to_m in self.to_mail:
				msg['to'] = to_m
				s.sendmail("abc@gmail.com", str(to_m), msg.as_string())
				self.logger.info("send mail to %s" % (to_m))

			# 세션 종료
			s.quit()
			self.logger.info("send mail done!")
		except Exception as ex:
			self.logger.critical(str(ex))
			self.logger.critical("fail send mail")

	def select_netflow_db(self, b_ip):
		try:
			self.logger.info("---------------------------------------------")
			#test
			#tb_t = (self.now_time - timedelta(minutes=60)).strftime('%Y%m%d%H')
			#self.db_collection = 'netflow-'+tb_t

			self.logger.info("search zombie IP in Netflow_db[collection: %s](block_ip: %s)" %(self.db_collection, b_ip))

			# 시작시간 체크
			st = datetime.now()
			# db 접속
			mongo_db = pymongo.MongoClient(self.db_ip, self.db_port, username=self.db_user, password=self.db_passwd)
			# 필터값 입력
			filter = {'dst_ip': b_ip}
			project = {
				'timestamp': 1,
				'protocol': 1,
				'bytes': 1,
				'pkts': 1,
				'src_port': 1,
				'dst_port': 1,
				'src_ip': 1,
				'dst_ip': 1
			}
			sort=list({
			    'timestamp': -1
			}.items())

			'''
			#기존 json파일 양식
			{
				"time_stamp": "2021-04-12 12:16:39",
				"ip_protocol_version": 4,
				"bytes": 936,
				"pkts": 2,
				"prot": 17,
				"l4_src_port": 123,
				"l4_dst_port": 63058,
				"ipv4_src_addr": "45.116.179.236",
				"ipv4_dst_addr": "103.115.164.43"
			}
			'''
			result = mongo_db[self.db_name][self.db_collection].find(filter=filter, projection=project,sort=sort, limit=50000)
			mongo_db.close()
			t = (datetime.now() - st).seconds

			self.logger.info('select time: %s' % (t))

			new_result = []
			for r_dic in result:
				tmp_dic = {}
				tmp_dic["ip_protocol_version"] =  4
				for k, v in r_dic.items():
					if k == 'timestamp':
						tmp_dic['time_stamp'] =  v
					elif k == 'src_ip':
						tmp_dic['ipv4_src_addr'] = v
					elif k == 'dst_ip':
						tmp_dic['ipv4_dst_addr'] = v
					elif k == 'pkts':
						tmp_dic['pkts'] = int(v/1000)
					elif k == 'bytes':
						tmp_dic['bytes'] = int(v/1000)
					elif k == 'src_port':
						tmp_dic['l4_src_port'] = v
					elif k == 'dst_port':
						tmp_dic['l4_dst_port'] = v
					elif k == 'protocol':
						tmp_dic['prot'] = v

				new_result.append(tmp_dic)

			return new_result

		except Exception as ex:
			self.logger.critical(str(ex))
			return []

	def test(self):
		try:
			res = list(self.select_netflow_db('110.70.248.5'))
			print(res)
		except Exception as ex:
			self.logger.critical(str(ex))

	def run(self):
		try:
			self.logger.info("==========================================================")
			current_time = datetime.today().strftime('%Y-%m-%d %H:%M:%S')
			self.logger.info("Start_time: %s" %(current_time))
			self.get_block_ip() #차단IP 조회
			self.delete_tmp_file() #*.done 파일 삭제
			if len(self.block_ip_dic) > 0:
				self.get_zombie_ip() #좀비IP 조회(+좀비IP netflow 파일저장)

			current_time = datetime.today().strftime('%Y-%m-%d %H:%M:%S')
			self.logger.info("End_time: %s" %(current_time))
			self.logger.info("==========================================================")
			
			if len(self.block_ip_dic) > 0:
				self.logger.info("***** 샘플 출력*****")
				min_size = 5
				for k,v in self.zombie_ip_dic.items():
					self.logger.info("-----------------------------------------")
					b_time = (datetime.strptime(self.block_ip_dic[k], '%Y%m%d%H%M%S')).strftime('%Y-%m-%d %H:%M:%S')
					self.logger.info("block_ip: %s | 차단시간: %s" %(k,str(b_time)  ))
					self.logger.info("zombie_ip(%s)개:(샘플) %s  " %(len(self.zombie_ip_dic[k]), self.zombie_ip_dic[k][: ( min(min_size, len(self.zombie_ip_dic[k])) )] )  )

				#메일 발송
				if self.static_analyze == 0: #자동 동작시만
				#if self.static_analyze > -1: #test용 
					self.send_mail()

			self.logger.info("")
		except Exception as ex:
			self.logger.critical(str(ex))

if __name__ == "__main__":
	block_ip = Block_ip_search("/home/abc/conf/config.ini")
	block_ip.run()
