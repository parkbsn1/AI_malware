# -*- coding: utf-8 -*-
import subprocess
import logging
import os
import smtplib
from email.mime.text import MIMEText
from datetime import datetime, timedelta
from configparser import ConfigParser
from logging.handlers import RotatingFileHandler
from multiprocessing import Process
import pymongo



class Qry_domain_ip(Process):
    def __init__(self, conf_name):
        try:
            Process.__init__(self)
            config = ConfigParser()
            config.read(conf_name)

            self.now_time = datetime.now()
            self.not_time_str = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
            self.set_logger(config.get("PATH", "LOG_PATH"))
            self.white_domain_path = config.get("PATH", "WHITE_DOMAIN_PATH")

            #몽고DB conn
            self.db_ip = config.get("MONGO_DB", "IP")
            self.db_port = int(config.get("MONGO_DB", "PORT"))
            self.db_user = config.get("MONGO_DB", "ID")
            self.db_passwd = config.get("MONGO_DB", "PW")
            self.db_name = config.get("MONGO_DB", "DB_NAME")
            self.db_collection = 'system_status'

            #장애 기준값
            self.error_system_disk_usage = 80  # 시스템 disk 사용률 임계치
            self.error_system_memory_usage = 80 # 시스템 mem 사용률 임계치

            #메일 수신자
            self.to_mail = ['abc@abc.com', 'abc@abc.com','abc@abc.com']
        except Exception as ex:
            print("__init__ ERROR")

    def set_logger(self, log_path):
        if not os.path.exists(log_path):
            subprocess.getstatusoutput("mkdir -p " + log_path)

        self.logger = logging.getLogger("Block_ip_search")

        self.logger.setLevel(logging.INFO)

        log_name = "server_monitor.log"
        formatter = logging.Formatter("[%(asctime)s][%(levelname)s] %(filename)s(%(lineno)d) %(message)s")
        file_handler = RotatingFileHandler(os.path.join(log_path, log_name), maxBytes=5 * 1024 * 1024, backupCount=10)
        stream_handler = logging.StreamHandler()
        file_handler.setFormatter(formatter)
        stream_handler.setFormatter(formatter)

        self.logger.addHandler(file_handler)
        self.logger.addHandler(stream_handler)

    def check_server_status(self):
        try:
            #시작시간 체크
            st = datetime.now()

            t1 = (self.now_time - timedelta(minutes=10)).strftime('%Y-%m-%d %H:%M:%S')
            #db 접속
            mongo_db = pymongo.MongoClient(self.db_ip, self.db_port, username=self.db_user, password=self.db_passwd)
            #필터값 입력
            filter = {
                'timestamp': {
                    '$gte': t1
                }
            }

            #장애 발생용
            test_filter = {
                'timestamp': {
                    '$lte': '2021-04-19 22:35:00'
                }
            }
            project = {}
            sort = list({
                'timestamp': -1
            }.items())
            limit = 10
            #db 쿼리
            #,projection=project
            result = mongo_db[self.db_name][self.db_collection].find(filter=filter,sort=sort,limit=limit)
            mongo_db.close()
            t = (datetime.now() - st).seconds

            self.logger.info('select_time: %s' %(t))

            return result

        except Exception as ex:
            self.logger.critical(ex)
            return 0

    def send_mail(self, res, error_flag):
        try:
            now_time = self.now_time.strftime("%m-%d %H:%M")

            mail_text = "AI 시스템 " + str(error_flag) + "장애발생이 의심되고 있습니다. \n"
            mail_text = mail_text + "아래 상태값을 확인 후 조치해주시기 바랍니다. (최근 10분: ~" + str(now_time) + ")\n"
            mail_text = mail_text + '==============================================================================\n'

            #db에 데이터가 없는 경우
            if 'no_data' in error_flag:
                mail_text = mail_text + "최근 10분간 입려된 데이터가 없습니다.\n"

            #임계치 수치를 초과하는 경우
            else:
                for status_dic in res:
                    mail_text = mail_text + str(status_dic['timestamp'])
                    for e in error_flag:
                        #mail_text = mail_text + 'system_disk_usage: ' + str(status_dic['system_disk_usage']) + '\n'
                        mail_text = mail_text +  ' | ' + str(e) + ': ' + str(status_dic[e])
                    mail_text = mail_text + '\n'
                mail_text = mail_text + '==============================================================================\n'
                mail_text = mail_text + '최근 시스템 상태 값(전체)\n'
                for status_dic in res:
                    for key in status_dic.keys():
                        if key == '_id': continue
                        mail_text = mail_text + str(key) + ': \t' + str(status_dic[key]) + '\n'
                        #print(key, status_dic[key])
                    break
            mail_text = mail_text + '==============================================================================\n'
            self.logger.info("context: %s" %(mail_text))

            #세션생성
            s = smtplib.SMTP('smtp.gmail.com', 587) #gmail사용하기위한 변수, 지메일포트(587)
            #TLS보안시작
            s.starttls()
            # 로그인 인증
            s.login('abc@gmail.com', 'abcdefghijklmnop')
            # 보낼 메시지 설정
            msg = MIMEText('%s' %(mail_text))
            msg['Subject'] = '[장애]AI 시스템 장애 알람'
            msg['From'] = 'abc@gmail.com'

            # 메일 보내기
            for to_m in self.to_mail:
                msg['to'] = to_m
                s.sendmail("kt.nw.csc@gmail.com", str(to_m), msg.as_string())
                self.logger.info("send mail to %s" %(to_m))

            # 세션 종료
            s.quit()
            self.logger.info("send mail done!")
        except Exception as ex:
            self.logger.critical(str(ex))
            self.logger.critical("fail send mail")

    def main(self):
        res = list(self.check_server_status())
        '''
        # res 필드값
        timestamp / mongo_max_memory_usage / system_cpu_usage / system_memory_usage / system_disk_usage 
        /python_procs / netflow_count / ddos_brief_count /cnc_brief_count / mongo_memory_usage
        '''

        #for r in res:
            #print(r)

        error_flag = []

        #입력된 data가 업는 경우
        if len(res) == 0:
            error_flag.append('no_data')

        system_mem_flag = 0
        for status_dic in res:
            #test용
            #print(f"time: {status_dic['timestamp']} | sys_mem: {status_dic['system_memory_usage']}")
            # 장애 기준
            if status_dic['system_disk_usage'] > self.error_system_disk_usage: #system disk 사용률
                error_flag.append('system_disk_usage')

            if status_dic['system_memory_usage'] > self.error_system_memory_usage: #system mem 사용률
                system_mem_flag += 1
                if system_mem_flag > 1:
                    # 장애로 판정
                    error_flag.append('system_memory_usage')
            else:
                system_mem_flag = 0
        error_flag = list(set(error_flag))

        '''
        for k in status_dic.keys():
            print(f"key: {k} / values: {status_dic[k]} |", end='')
        print("")
        '''


        if len(error_flag) > 0:
            self.logger.info("read to send mail...")
            self.send_mail(res, error_flag)
        else:
            self.logger.info("server status: GREEN!")

if __name__ == '__main__':
    qry_domain_ip = Qry_domain_ip("/home/abc/conf/config.ini")
    qry_domain_ip.main()
