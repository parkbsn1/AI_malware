# -*- coding: utf-8 -*-
import requests
import json
import time
from bs4 import BeautifulSoup
from pprint import pprint as pp

def vt_ip_addresses(qry_ip, vt_key='virustotal API key'):
    url = 'https://www.virustotal.com/api/v3/ip_addresses/'+qry_ip
    headers = {'x-apikey': vt_key}
    #VT에 쿼리
    response = requests.get(url, headers=headers)
    result = {}
    if response.status_code == 200:
        html = response.text
        bs = BeautifulSoup(html, 'html.parser')
        bs_json = json.loads(bs.text)

        result['ip'] = qry_ip

        for k,v in bs_json['data']['attributes'].items():
            if k == 'country':
                result['country'] = v
            elif k == 'as_owner':
                result['as_owner'] = v
            elif k == 'last_analysis_stats':
                analysis_total = 0
                for k2, v2 in bs_json['data']['attributes']['last_analysis_stats'].items():
                    if k2 == 'harmless':
                        result['harmless'] = v2
                        analysis_total += v2
                    elif k2 == 'malicious':
                        result['malicious'] = v2
                        analysis_total += v2
                    elif k2 == 'suspicious':
                        result['suspicious'] = v2
                        analysis_total += v2
                    elif k2 == 'undetected':
                        result['undetected'] = v2
                        analysis_total += v2
                result['analysis_total'] = analysis_total
            elif k == 'last_analysis_results':
                engine_name = []
                for k2, v2 in bs_json['data']['attributes']['last_analysis_results'].items():
                    if bs_json['data']['attributes']['last_analysis_results'][k2]['result'] in ('malware', 'malicious'):
                        engine_name.append(k2)
                result['mal_detect_engine'] = engine_name
        result['vt_url'] = 'https://www.virustotal.com/gui/ip-address/'+qry_ip+'/detection'

        return result
        #VT 쿼리 결과 일부 내용
        '''
        {
            "data": {
                "attributes": {
                    "regional_internet_registry": "RIPE NCC",
                    "network": "37.1.216.0/21",
                    "tags": [],
                    "country": "NL",
                    "as_owner": "Scalaxy B.V.",
                    "last_analysis_stats": {
                        "harmless": 71,
                        "malicious": 1,
                        "suspicious": 0,
                        "undetected": 10,
                        "timeout": 0
                    },
                    "asn": 58061,
                    "whois_date": 1614619885,
                    "last_analysis_results": {
                        "CMC Threat Intelligence": {
                            "category": "harmless",
                            "result": "clean",
                            "method": "blacklist",
                            "engine_name": "CMC Threat Intelligence"
                        },
                        "CLEAN MX": {
                            "category": "harmless",
                            "result": "clean",
                            "method": "blacklist",
                            "engine_name": "CLEAN MX"
                        },
                        "DNS8": {
                            "category": "harmless",
                            "result": "clean",
                            "method": "blacklist",
                            "engine_name": "DNS8"
                        },
        '''
    else :
        print(response.status_code)
        return result


def vt_ip_relat_communicating_files(qry_ip, vt_key='virustotal API key'):
    url = 'https://www.virustotal.com/api/v3/ip_addresses/'+qry_ip+'/communicating_files'
    headers = {'x-apikey': vt_key}
    #VT에 쿼리
    response = requests.get(url, headers=headers)
    result = []
    if response.status_code == 200:
        html = response.text
        bs = BeautifulSoup(html, 'html.parser')
        bs_json = json.loads(bs.text)

        for data_v in bs_json['data']:
            tmp_dic = {}
            #sha256값
            sha256 = (data_v['attributes']['sha256'])
            #악성 판정 수 / 판정 엔진 수 구하기
            last_analysis_stats = (data_v['attributes']['last_analysis_stats'])
            total_cnt = 0
            for stats_k, stats_v in  last_analysis_stats.items():
                if stats_k in ('malware', 'malicious'):
                    mal_cnt = stats_v
                total_cnt += stats_v
            #파일명이 존재하면 첫번째 값으로, 없으면 파일명을 sha256값으로 대체
            if len(data_v['attributes']['names']) > 0:
                file_name = (data_v['attributes']['names'][0])
            else:
                file_name = sha256
            #파일 타입
            type_description = (data_v['attributes']['type_description'])
            #파일분석 결과 VT 링크
            analysis_url = 'www.virustotal.com/gui/file/'+sha256+'/detection'

            tmp_dic['sha256'] = sha256
            tmp_dic['total_cnt'] = total_cnt
            tmp_dic['mal_cnt'] = mal_cnt
            tmp_dic['file_name'] = file_name
            tmp_dic['file_type'] = type_description
            tmp_dic['analysis_url'] = analysis_url

            # print('='*30)
            # print(f'sha256: {sha256}')
            # print(f'last_analysis_stats: {last_analysis_stats}')
            # print(f'mal_cnt/total_cnt: {mal_cnt}/{total_cnt}')
            # print(f'file_name: {file_name}')
            # print(f'type_description: {type_description}')
            # print(f'analysis_url: {analysis_url}')
            # print('=' * 30)

            result.append(tmp_dic)
        result_return = {'communicating_files': result}
        return result_return
    else :
        print(response.status_code)
        result_return = {'communicating_files': []}
        return result_return


def vt_ip_relat_files_referring(qry_ip, vt_key='virustotal API key'):
    url = 'https://www.virustotal.com/api/v3/ip_addresses/'+qry_ip+'/referrer_files'
    headers = {'x-apikey': vt_key}

    #VT에 쿼리
    response = requests.get(url, headers=headers)
    result = []
    if response.status_code == 200:
        html = response.text
        bs = BeautifulSoup(html, 'html.parser')
        bs_json = json.loads(bs.text)

        for data_v in bs_json['data']:
            tmp_dic = {}
            # sha256값
            sha256 = (data_v['attributes']['sha256'])
            # 악성 판정 수 / 판정 엔진 수 구하기
            last_analysis_stats = (data_v['attributes']['last_analysis_stats'])
            total_cnt = 0
            for stats_k, stats_v in last_analysis_stats.items():
                if stats_k in ('malware', 'malicious'):
                    mal_cnt = stats_v
                total_cnt += stats_v
            # 파일명이 존재하면 첫번째 값으로, 없으면 파일명을 sha256값으로 대체
            if len(data_v['attributes']['names']) > 0:
                file_name = (data_v['attributes']['names'][0])
            else:
                file_name = sha256
            # 파일 타입
            type_description = (data_v['attributes']['type_description'])
            # 파일분석 결과 VT 링크
            analysis_url = 'www.virustotal.com/gui/file/' + sha256 + '/detection'

            tmp_dic['sha256'] = sha256
            tmp_dic['total_cnt'] = total_cnt
            tmp_dic['mal_cnt'] = mal_cnt
            tmp_dic['file_name'] = file_name
            tmp_dic['file_type'] = type_description
            tmp_dic['analysis_url'] = analysis_url

            # print('=' * 30)
            # print(f'sha256: {sha256}')
            # print(f'last_analysis_stats: {last_analysis_stats}')
            # print(f'mal_cnt/total_cnt: {mal_cnt}/{total_cnt}')
            # print(f'file_name: {file_name}')
            # print(f'type_description: {type_description}')
            # print(f'analysis_url: {analysis_url}')
            # print('=' * 30)
            result.append(tmp_dic)
        result_return = {'files_referring': result}
        return result_return
    else :
        print(response.status_code)
        result_return = {'files_referring': []}
        return result_return

def run_vt_query(qry_ip):

    result = vt_ip_addresses(qry_ip)
    print('vt_ip_address')
    time.sleep(5)

    communicating_result = vt_ip_relat_communicating_files(qry_ip)
    print('vt_ip_relat_communicating_files')
    result.update(communicating_result)
    time.sleep(5)

    referring_result = vt_ip_relat_files_referring(qry_ip)
    print('vt_ip_relat_files_referring')
    result.update(referring_result)
    time.sleep(5)

    print(type(result))
    pp(result)
    return result

def main():
    result = run_vt_query('185.193.88.78')

    #test용
    #qry_ip = '192.162.247.88'  # communicating_files 악성 존재 / referring 없음
    #qry_ip = '179.43.176.41'  # communicating_files 악성 존재 / referring 악성 존재
    #qry_ip = '45.14.149.178' # communicating_files 없음 /   referring 없음
    #qry_ip = '104.168.198.121' # communicating_files 없음 / referring만 악성
    #qry_ip = '45.14.149.178' #일반조회시만 악성
    # qry_ip = '156.96.156.220' # communicating_files 없음 / referring만 악성
    #qry_ip '63.153.71.117' # 정상
    #qry_ip = '185.193.88.78' #정상
if __name__ == '__main__':
    main()