# -*- coding: utf-8 -*-
import subprocess
import logging
import os
import pymysql
import pytz
import sys
import json
import pandas as pd
import dns
import time
from dns import resolver

from datetime import datetime, timedelta
from configparser import ConfigParser
from logging.handlers import RotatingFileHandler
from multiprocessing import Process
#from pymongo import MongoClient
import pymongo



class Qry_domain_ip(Process):
    def __init__(self, conf_name):
        try:
            Process.__init__(self)
            config = ConfigParser()
            config.read(conf_name)

            self.now_time = datetime.now()
            self.not_time_str = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
            self.set_logger(config.get("PATH", "LOG_PATH"))
            self.white_domain_path = config.get("PATH", "WHITE_DOMAIN_PATH")

            #몽고DB conn
            self.db_ip = config.get("MONGO_DB", "IP")
            self.db_port = int(config.get("MONGO_DB", "PORT"))
            #self.db_host = self.db_ip + ':' + self.db_port
            self.db_user = config.get("MONGO_DB", "ID")
            self.db_passwd = config.get("MONGO_DB", "PW")
            self.db_name = config.get("MONGO_DB", "DB_NAME")
            self.db_collection = 'white_domain_ip'

        except Exception as ex:
            print("__init__ ERROR")

    def set_logger(self, log_path):
        if not os.path.exists(log_path):
            subprocess.getstatusoutput("mkdir -p " + log_path)

        self.logger = logging.getLogger("Block_ip_search")

        self.logger.setLevel(logging.INFO)

        log_name = "qry_domain_ip.log"
        formatter = logging.Formatter("[%(asctime)s][%(levelname)s] %(filename)s(%(lineno)d) %(message)s")
        file_handler = RotatingFileHandler(os.path.join(log_path, log_name), maxBytes=5 * 1024 * 1024, backupCount=10)
        stream_handler = logging.StreamHandler()
        file_handler.setFormatter(formatter)
        stream_handler.setFormatter(formatter)

        self.logger.addHandler(file_handler)
        self.logger.addHandler(stream_handler)

    def domain_qry(self, qry_domain):
        try:
            ip_list = []
            result = dns.resolver.query(qry_domain, 'A')
            for ipval in result:
                #self.logger.info("%s IP: %s" %(qry_domain, ipval.to_text()))
                ip_list.append(ipval.to_text())
            return ip_list
        except Exception as ex:
            self.logger.critical(ex)
            return ip_list

    def static_insert_white_domain(self, data_dict): #수동 bulk 입력시 사용
        try:
            # 시작시간 체크
            st = datetime.now()
            # db 접속
            mongo_db = pymongo.MongoClient(self.db_ip, self.db_port, username=self.db_user, password=self.db_passwd)
            mongo_db[self.db_name][self.db_collection].insert_many(data_dict)
            mongo_db.close()
            t = (datetime.now() - st).seconds

            self.logger.info('static_insert_white_domain time: %s' % (t))
            return (len(data_dict))
        except Exception as ex:
            self.logger.critical(ex)
            return 0

    def insert_white_domain(self, data_dict):
        try:
            # 시작시간 체크
            #st = datetime.now()
            # db 접속
            mongo_db = pymongo.MongoClient(self.db_ip, self.db_port, username=self.db_user, password=self.db_passwd)
            mongo_db[self.db_name][self.db_collection].insert_one(data_dict)
            mongo_db.close()
            #t = (datetime.now() - st).seconds
            self.logger.info(f'insert: {data_dict}')
            return 1

        except Exception as ex:
            self.logger.critical(ex)
            return 0

    def select_white_domain(self):
        try:
            #시작시간 체크
            st = datetime.now()
            #db 접속
            mongo_db = pymongo.MongoClient(self.db_ip, self.db_port, username=self.db_user, password=self.db_passwd)
            #필터값 입력
            filter = {}
            project = {'white_ip': 1}

            result = mongo_db[self.db_name][self.db_collection].find(filter=filter,projection=project)
            mongo_db.close()
            t = (datetime.now() - st).seconds

            self.logger.info('select_white_domain time: %s' %(t))

            return result

        except Exception as ex:
            self.logger.critical(ex)
            return 0

    def main(self):
        self.logger.info("==========================================================")
        current_time = datetime.today().strftime('%Y-%m-%d %H:%M:%S')
        self.logger.info("Start_time: %s" %(current_time))
        qry_domain_ip_list = []

        #WL 도메인 리스트 불러오기
        with open(self.white_domain_path, 'r') as f:
            #white_domain_list = [line.replace('\n', '') for line in f.readlines() ]
            tmp_list = [line.replace('\n', '') for line in f.readlines() ]
        white_domain_list = list(set(tmp_list))
        #WL 도메인별 IP 쿼리
        cnt = 1 
        for q_d in white_domain_list:
            if cnt % 20 == 0:
                time.sleep(3)
                self.logger.info("sleep....(%s/%s)" %(cnt, len(white_domain_list)))
            cnt += 1
            tmp_ip_list = self.domain_qry(q_d)
            for i in tmp_ip_list:
                #domain_ip_dict[i] = q_d
                qry_domain_ip_list.append( {'white_ip': i, 'domain': q_d, 'insert_time': self.not_time_str} )
        #self.logger.info("domain_ip_dict: %s" %(qry_domain_ip_list))
        # qry_domain_ip_list형태: [{'ip': '223.130.195.95', 'domain': 'www.naver.com', 'insert_time': '2021-04-05 16:44:19'}, {'ip': '125.209.222.141', 'domain': 'www.naver.com', 'insert_time': '2021-04-05 16:44:19'}]

        #DB 기 저정된 white domain IP 가져오기
        white_domain = self.select_white_domain()
        WL =[w_d['white_ip'] for w_d in white_domain]

        insert_cnt = 0

        #1개씩 입력
        for q_d_ip in qry_domain_ip_list:
            #print(q_d_ip['white_ip'])
            if q_d_ip['white_ip'] not in WL:
                insert_cnt += (self.insert_white_domain(q_d_ip))
        self.logger.info(f"total inserted: {insert_cnt}")

        '''
        #수동 bulk입력
        insert_cnt = self.static_insert_white_domain(domain_ip_list)
        self.logger.info(f"bulk inserted: {insert_cnt}")
        '''


        #print(self.my_client.list_database_names())

if __name__ == '__main__':
    qry_domain_ip = Qry_domain_ip("/home/abc/conf/config.ini")
    qry_domain_ip.main()
